-- IMPORT DATASET  
USE SWIGGY_DB;
SELECT * FROM CUSTOMERS;
SELECT * FROM RESTAURANTS;		
SELECT * FROM ORDERS;  -- PARENT TABLE 
SELECT * FROM RIDERS;	
SELECT * FROM DELIVERY;		-- PARENT TABLE

-- CHECKING NULL VALUES 
SELECT COUNT(*) FROM RESTAURANTS
WHERE  RESTAURANT_ID IS NULL
	OR RESTAURANT_NAME IS NULL
    OR CITY IS NULL
    OR OPENING_HOURS IS NULL;
    
SELECT COUNT(*) FROM CUSTOMERS
WHERE  CUSTOMER_ID IS NULL
	OR CUSTOMER_NAME IS NULL
    OR REG_DATE IS NULL;
    
SELECT COUNT(*) FROM ORDERS
WHERE  ORDER_ID IS NULL
	OR CUSTOMER_ID IS NULL
    OR RESTAURANT_ID IS NULL
	OR ORDER_ITEM IS NULL 
    OR ORDER_DATE IS NULL
	OR ORDER_TIME IS NULL 
    OR ORDER_STATUS IS NULL
    OR TOTAL_AMOUNT IS NULL;
    
SELECT COUNT(*) FROM DELIVERY
WHERE  ORDER_ID IS NULL
	OR DELIVERY_ID IS NULL
    OR DELIVERY_STATUS IS NULL
	OR DELIVERY_TIME IS NULL 
    OR RIDER_ID IS NULL;

SELECT COUNT(*) FROM RIDERS
WHERE  RIDER_ID  IS NULL
	OR RIDER_NAME IS NULL
    OR SIGNUP_DATE IS NULL;

-- -------------------------------
-- ANALYSIS 
-- ------------------------------- 

-- TOP 3 FREQUENTLY ORDERED DISHES BY THE CUSTOMER NAME "JIVIKA SHUKLA"  IN THE LAST 1 YEAR.

-- JOIN CUST AND ORDERS
-- FILTER LAST 1 YEAR
-- FILTER "JIVIKA SHUKLA"
-- GROUP BY CT ID, ORDER ITEM, COUNT  

SELECT * 
FROM
(SELECT 
 C.CUSTOMER_ID,
 C.CUSTOMER_NAME, 
 O.ORDER_ITEM AS DISHES,
 COUNT(*) AS TOTAL_ORDER,
 DENSE_RANK() OVER ( ORDER BY COUNT(*) DESC) AS RANKS
 FROM
CUSTOMERS AS C
JOIN ORDERS AS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE STR_TO_DATE(O.ORDER_DATE , '%Y-%m-%d')>= CURRENT_DATE - INTERVAL 1 YEAR
AND C.CUSTOMER_NAME = "Jivika Shukla"
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_NAME, O.ORDER_ITEM
ORDER BY C.CUSTOMER_ID, TOTAL_ORDER DESC) AS T1
WHERE RANKS <=3;

-- ---------------------------------------------------------------------
-- POPULAR TIME SLOT  BASED ON 2 HOUR INTERVAL.
--  -------------------------------------------------------------------
SELECT 
	FLOOR(EXTRACT(HOUR FROM ORDER_TIME)/2)*2 AS START_TIME,
	FLOOR(EXTRACT(HOUR FROM ORDER_TIME)/2)*2 + 2 AS END_TIME,
    COUNT(*) AS TOTAL_ORDERS
FROM ORDERS
GROUP BY START_TIME, END_TIME
ORDER BY COUNT(*) DESC;

-- 3. ORDER VALUE ANALYSIS.
SELECT C.CUSTOMER_ID,
		C.CUSTOMER_NAME,
		ROUND(AVG(O.TOTAL_AMOUNT),2) AVG,
        COUNT(O.ORDER_ID) AS TOTAL_ORDERS 
 FROM ORDERS AS O
 JOIN CUSTOMERS AS C
 ON O.CUSTOMER_ID=C.CUSTOMER_ID
 GROUP BY CUSTOMER_ID
 HAVING COUNT(ORDER_ID)>=25
 ORDER BY TOTAL_ORDERS DESC;
 
 -- 4. HIGH VALUE CUSTOMER
 SELECT C.CUSTOMER_ID,
		C.CUSTOMER_NAME,
        SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT
FROM CUSTOMERS AS C
INNER JOIN ORDERS AS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID
HAVING SUM(O.TOTAL_AMOUNT)>=24000;

-- ORDERS WITHOUT DELIVERED --ORDER IS PLACED BUT NOT DELIVERED
SELECT R.RESTAURANT_NAME,
		COUNT(O.ORDER_ID) AS NO_OF_CANCELLED_ORDERS
 FROM ORDERS AS O
LEFT JOIN RESTAURANTS AS R
ON O.RESTAURANT_ID = R.RESTAURANT_ID
LEFT JOIN DELIVERY AS D
ON O.ORDER_ID = D.ORDER_ID
WHERE O.ORDER_ID NOT IN (SELECT ORDER_ID FROM DELIVERY)
GROUP BY RESTAURANT_NAME
ORDER BY COUNT(O.ORDER_ID) DESC;

-- 6.RESTAURANT REVENUE RANKING
-- RANK REATAURANTS BY THEIR TOTAL REVENUE FROM LAST YEAR.
WITH RANKING_TABLE
AS 
(SELECT R.RESTAURANT_NAME,
		R.CITY,
        SUM(O.TOTAL_AMOUNT) AS RVENUE,
        RANK() OVER(PARTITION BY R.CITY ORDER BY SUM(O.TOTAL_AMOUNT) DESC) AS RANKS
 FROM ORDERS AS O
 JOIN RESTAURANTS AS R
 ON O.RESTAURANT_ID = R.RESTAURANT_ID
 WHERE O.ORDER_DATE=CURDATE()-INTERVAL 1 YEAR
 GROUP BY R.RESTAURANT_NAME,
		R.CITY)
        SELECT * FROM RANKING_TABLE WHERE RANKS=1;
        
-- MOST POPULAR DISH IN EACH CITY BY NO.ORDERS
WITH RANK_OF_DISH
AS
(SELECT O.ORDER_ITEM AS MOST_POPULAR_DISH,
		SUM(O.TOTAL_AMOUNT) AS REVENUE,
        R.CITY,
        RANK() OVER(PARTITION BY  R.CITY ORDER BY SUM(TOTAL_AMOUNT) DESC) RANKS
FROM ORDERS AS O
JOIN RESTAURANTS AS R
ON O.RESTAURANT_ID = R.RESTAURANT_ID 
GROUP BY O.ORDER_ITEM,R.CITY
ORDER BY SUM(TOTAL_AMOUNT) DESC)
SELECT * 
FROM RANK_OF_DISH
 WHERE RANKS=1 ;
 
 -- RESTAURANT REVENUE RANKING
 WITH RANKING_TABLE
 AS
 (SELECT R.RESTAURANT_NAME,
		R.CITY,
        SUM(O.TOTAL_AMOUNT) AS REVENUE,
        RANK() OVER(PARTITION BY R.CITY ORDER BY SUM(O.TOTAL_AMOUNT) DESC) AS RANKS_AS_PER_CITY
 FROM ORDERS AS O
 JOIN RESTAURANTS AS R
 ON O.RESTAURANT_ID=R.RESTAURANT_ID
 WHERE O.ORDER_DATE >= CURRENT_DATE - INTERVAL 1 YEAR
 GROUP BY R.RESTAURANT_NAME, R.CITY)
 SELECT * FROM RANKING_TABLE
 WHERE RANKS_AS_PER_CITY=1;
--  HAVING  SUM(O.TOTAL_AMOUNT) LIMIT 5;

-- DELIVERY PERFORMANCE MATRICS
-- AVERAGE DELIVERY TIME PER RIDER   
SELECT R.RIDER_ID,
		R.RIDER_NAME,
        ROUND(AVG(TIMESTAMPDIFF(MINUTE,O.ORDER_TIME,D.DELIVERY_TIME)),2) AS AVG_TIME_MINUTES,
        RANK() OVER(ORDER BY ROUND(AVG(TIMESTAMPDIFF(MINUTE,O.ORDER_TIME,D.DELIVERY_TIME)),2) ) AS RANKS
FROM DELIVERY AS D
JOIN RIDERS AS R
ON D.RIDER_ID=R.RIDER_ID
JOIN ORDERS AS O
ON D.ORDER_ID=O.ORDER_ID
JOIN RESTAURANTS AS RE
WHERE D.DELIVERY_TIME>=O.ORDER_TIME
GROUP BY R.RIDER_ID,R.RIDER_NAME 
ORDER BY ROUND(AVG(TIMESTAMPDIFF(MINUTE,O.ORDER_TIME,D.DELIVERY_TIME)),2) ;

-- CITY SEGMENTATION
-- CUSTOMER BASE AND REVENUE BY CITY
-- CUSTOMER PER CITY
SELECT 
		-- CUSTOMER_NAME,
        R.CITY,
        COUNT(DISTINCT O.CUSTOMER_ID) AS NO_OF_CUSTOMERS
FROM RESTAURANTS AS R
LEFT JOIN( SELECT ORDER_ID, 
					CUSTOMER_ID,
                    RESTAURANT_ID
                    FROM 
                    ORDERS) AS O
ON R.RESTAURANT_ID = O.RESTAURANT_ID
GROUP BY 
		R.CITY; 
 -- CITY-WISE REVENUE 
 SELECT CITY,
		SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE,
RANK() OVER(ORDER BY SUM(TOTAL_AMOUNT)DESC) AS RANKS
FROM ORDERS AS O
LEFT JOIN RESTAURANTS AS R
ON O.RESTAURANT_ID = R.RESTAURANT_ID
GROUP BY CITY
 ORDER BY RANKS;
 
 -- PEAK DAY IN A WEAK BY ORDERS 
 SELECT 
		DAYNAME(ORDER_DATE) AS DAY,
        COUNT(*) AS TOTAL_ORDERS
FROM ORDERS
GROUP BY DAY
ORDER BY TOTAL_ORDERS DESC ; 

-- CUSTOMER RETENTION
SELECT C.CUSTOMER_ID ,
		C.CUSTOMER_NAME,
        COUNT(O.ORDER_ID) AS TOTAL_ORDERS,
       CASE 
WHEN COUNT(O.ORDER_ID)<16 THEN "NEW CUSTOMER"
ELSE "RETURNING CUSTOMER"
END AS CUSTOMER_RETENTION
FROM ORDERS AS O
JOIN CUSTOMERS AS C
ON O.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY CUSTOMER_ID ,
		CUSTOMER_NAME
ORDER BY COUNT(O.ORDER_ID);
	
 
 
 
 
 





 


 
 SELECT CUSTOMER_NAME
 FROM CUSTOMERS
 WHERE CUSTOMER_ID=36;
 
 
